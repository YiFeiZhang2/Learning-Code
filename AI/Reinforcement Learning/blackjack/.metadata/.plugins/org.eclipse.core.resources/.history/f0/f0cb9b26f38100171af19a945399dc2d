import java.util.ArrayList;
import java.util.HashMap;
import java.util.Scanner;
import java.util.Set;
// An Ace is 1, but can be 11 if that does not make the hand bust
// State S is a specific state of the dealer's shown card, player's value, and if they have a usable ace
// Action A is either True (hit) or False (stay)
public class BlackJackGame {
	public static int randomCard (){
		return ((int) (Math.random()*10) + 1);
	}
	
	// returns an ArrayList of all possible States
	public static ArrayList<State> getAllStates (){
		ArrayList<State> states = new ArrayList<State>();
		for (int dealerCard = 1; dealerCard < 11; dealerCard++) {
			for (int playerValue = 2; playerValue < 22; playerValue++) {
				states.add(new State(dealerCard, playerValue, true));
				states.add(new State(dealerCard, playerValue, false));
			}
		}
		return states;
	}
	
	// Create the initial state-action -> value map for all state-action pairs
	// Create the map such that it will have the initial policy of only sticking on 20 and 21
	public static HashMap<StateActionPair, Double> initializeStateActionValueMap (){
		HashMap<StateActionPair, Double> map = new HashMap<StateActionPair, Double>();
		ArrayList<State> states = getAllStates();
		for (State s : states) {
			StateActionPair sapTrue = new StateActionPair(s, true);
			if (sapTrue.state.val >= 20) {
				map.put(sapTrue, -0.01);
			} else {
				map.put(sapTrue, 0.01);
			}
			StateActionPair sapFalse = new StateActionPair(s, false);
			if (sapFalse.state.val >= 20) {
				map.put(sapFalse, 0.01);
			} else {
				map.put(sapFalse, -0.01);
			}
		}
		return map;
	}
	
	// Create initial state-action -> count map for all state-action pairs
	// count is the number of times the specific state-action has been encountered
	public static HashMap<StateActionPair, Integer> initializeCountMap (){
		HashMap<StateActionPair, Integer> map = new HashMap<StateActionPair, Integer>();
		ArrayList<State> states = getAllStates();
		for (State s : states) {
			StateActionPair sapTrue = new StateActionPair(s, true);
			StateActionPair sapFalse = new StateActionPair(s, false);
			map.put(sapTrue, 0);
			map.put(sapFalse, 0);
		}
		return map;
	}
	
	public static State getRandomState (ArrayList<State> allStates){
		int index = (int) (Math.random() * allStates.size());
		return allStates.get(index);
	}
	
	public static boolean getRandomAction (){
		if (Math.random() < 0.5) {
			return true;
		} else {
			return false;
		}
	}
	
	// The policy is just the action that will give the highest value from the
	// state-action -> value map
	public static boolean selectAction (HashMap<StateActionPair, Double> ValueMap, State state){
		StateActionPair sapTrue = new StateActionPair(state, true);
		StateActionPair sapFalse = new StateActionPair(state, false);
		
		if (ValueMap.get(sapTrue) > ValueMap.get(sapFalse)) {
			return true;
		} else {
			return false;
		}
	}
	
	// dealer will hit until reaching 17 or over
	public static void dealerTurn (Hand dealerHand){
		while (dealerHand.value() < 17) {
			dealerHand.addCard(randomCard());
		}
	}
	
	public static double computeReward (Hand playerHand, Hand dealerHand){
		// reward is 1 for winning, 0 for tieing, -1 for losing
		double reward = 1;
		if (playerHand.value() > 21) {
			reward = -1;
		} else {
			if (playerHand.value() > dealerHand.value()) {
				reward = 1;
			} else if (playerHand.value() == dealerHand.value()) {
				reward = 0;
			} else {
				reward = -1;
			}
		}
		return reward;
	}
	
	// Plays Black Jack num amount of times, with the AI learning via MonteCarloES
	// ES - Exploring starts
	public static HashMap<StateActionPair, Double> MonteCarloES (int num){
		ArrayList<State> allStates = getAllStates();
		
		// map from state-action to value
		HashMap<StateActionPair, Double> valueMap = initializeStateActionValueMap();
		// Set<StateActionPair> x = valueMap.keySet();
		// map from state-action to the number of times that particular state-action has been seen
		HashMap<StateActionPair, Integer> count = initializeCountMap();
		
		System.out.println(valueMap.size());
		
		for (int i = 0; i < num; i++){
			ArrayList<StateActionPair> episode = new ArrayList<StateActionPair>();
			// Choose starting state and action randomly as part of exploring starts
			State curState = getRandomState(allStates);
			boolean curAction = getRandomAction();
			episode.add(new StateActionPair(curState, curAction));
			
			Hand playerHand = curState.getHand(true);
			Hand dealerHand = curState.getHand(false);
			// while the player chooses the action of hitting
			while (curAction) {
				playerHand.addCard(randomCard());
				if (playerHand.value() > 21) {
					break;
				}
				curState = new State(playerHand, dealerHand);
				curAction = selectAction(valueMap, curState);
				episode.add(new StateActionPair(curState, curAction));
			}
			
			// dealer plays
			dealerTurn(dealerHand);
			// get reward form episode, no discounts
			double reward = computeReward(playerHand, dealerHand);
			// update value estimates for state-actions seen
			for (StateActionPair sa : episode) {
				int seenSoFar = count.get(sa);
				double averageValue = valueMap.get(sa);
				count.put(sa, seenSoFar + 1);
				valueMap.put(sa, averageValue + (reward - averageValue)/(seenSoFar + 1));
			}
		}
		return valueMap;
	}
	
	public static double[] BlackJack(HashMap<StateActionPair, Double> Q, Scanner sc) {
		// initialize player, ai, and dealer's Hands
		Hand playerHand = new Hand();
		Hand aiHand = new Hand();
		Hand dealerHand = new Hand();
		// deal cards
		playerHand.addCard(randomCard());
		playerHand.addCard(randomCard());
		aiHand.addCard(randomCard());
		aiHand.addCard(randomCard());
		dealerHand.addCard(randomCard());
		// reveal dealer's card and player's cards
		System.out.print("The dealer's cards: ");
		dealerHand.printH();
		System.out.print("Your cards: ");
		playerHand.printH();
		// give player choice of hitting or staying
		System.out.println("Enter 'hit' to get another card, or 'stay' to keep your hand as is");
		String choice = sc.next().trim().toLowerCase();
		// keep hitting until player chooses to stay
		while (!choice.equals("stay")) {
			// make sure that the player's choice makes sense
			while (!choice.equals("hit")) {
				System.out.println("that is not a valid choice");
				System.out.println("Enter 'hit' to get another card, or 'stay' to keep your hand as is");
				choice = sc.next().trim().toLowerCase();
			}
			playerHand.addCard(randomCard());
			System.out.print("Your cards: ");
			playerHand.printH();
			// check to see player's hand is still valid
			if (playerHand.value() > 21) {
				System.out.println("You have gone bust (>21 total). You lose.");
				break;
			}
			System.out.println("Do you want to hit or stay?");
			choice = sc.next().trim().toLowerCase();
		}
		// ai's turn
		State curState = new State(aiHand, dealerHand);
		boolean curAction = selectAction(Q, curState);
		while (curAction) {
			aiHand.addCard(randomCard());
			if (aiHand.value() > 21) {
				break;
			}
			curState = new State(aiHand, dealerHand);
			curAction = selectAction(Q, curState);
		}
		// dealer's turn
		dealerTurn(dealerHand);
		double playerReward = computeReward(playerHand, dealerHand);
		double aiReward = computeReward(aiHand, dealerHand);
		System.out.println("Your reward is " + playerReward);
		System.out.println("The ai's reward is " + aiReward);
		double[] rewards = {playerReward, aiReward};
		return rewards;
	}
	
	
	public static void main (String args[]){
		int numGames = 1000000;
		System.out.println("MonteCarloES");
		HashMap<StateActionPair, Double> Q = MonteCarloES(numGames);
		System.out.println(Q);
		
		// game of blackjack
		double aiAveReward = 0;
		double playerAveReward = 0;
		int gameCount = 0;
		double[] rewards;
		System.out.println("1 for winning, 0 for tieing, -1 for losing, infinite cards");
		System.out.println("0 to leave, 1 to start a game of Blackjack");
		Scanner in = new Scanner(System.in);
		String choice = in.next().trim();
		while (!choice.equals("0")) {
			if (!choice.equals("1")) {
				System.out.println("Your choice did not make sense. Try again.");
				choice = in.next().trim();
			}
			rewards = BlackJack(Q, in);
			aiAveReward += (rewards[1] - aiAveReward)/(gameCount + 1);
			playerAveReward += (rewards[0] - playerAveReward)/(gameCount + 1);
			System.out.println("Game over. 0 to leave, 1 to go again");
			choice = in.next().trim();
		}
		in.close();
	}
}
